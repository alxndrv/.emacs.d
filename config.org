#+TITLE: Emacs configuration
#+AUTHOR: Andrey Aleksandrov
#+OPTIONS: num:nil toc:nil html-postamble:nil

* Basic settings
  Settings which are not package-specific
** Emacs
  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :preface
      (defvar alx/indent-width 4)

      :config
      (setq ring-bell-function 'ignore)

      ;; Disable default toolbar and menubar
      (tool-bar-mode -1)
      (menu-bar-mode -1)

      ;; Highlight active line
      (global-hl-line-mode t)

      ;; Use Y/N instead of yes/no
      (fset 'yes-or-no-p 'y-or-n-p)

      ;; Comment style
      (setq comment-style 'extra-line)

      ;; Always use spaces
      (setq-default indent-tabs-mode nil
                    tab-width alx/indent-width)
      )
  #+END_SRC
** Custom file
   Store all Custom settings in a separate file so it doesn't write into init.el
   #+BEGIN_SRC emacs-lisp
     (use-package cus-edit
       :ensure nil
       :config
       (setq custom-file "~/.emacs.d/custom.el")
       )
   #+END_SRC
** Startup
   Don't show default startup screen
   #+BEGIN_SRC emacs-lisp
     (use-package "startup"
       :ensure nil
       :config (setq inhibit-startup-screen t))
   #+END_SRC
** Scrollbar
   Disable scrollbar
   #+BEGIN_SRC emacs-lisp
     (use-package scroll-bar
       :ensure nil
       :config (scroll-bar-mode -1))
   #+END_SRC
** Column/line numbers
   Enable column/line numbers in modeline
   #+BEGIN_SRC emacs-lisp
     (use-package simple
       :ensure nil
       :config
       (line-number-mode +1)
       (column-number-mode +1)
       )
   #+END_SRC
** Auto-revert
   Auto-reverting files edited outside of Emacs
   #+BEGIN_SRC emacs-lisp
     (use-package autorevert
       :ensure nil
       :config
       (global-auto-revert-mode +1)
       (setq auto-revert-interval 2
             auto-revert-check-vc-info t
             global-auto-revert-non-file-buffers t
             auto-revert-verbose nil)
       )
   #+END_SRC
** Display time in modeline
   #+BEGIN_SRC emacs-lisp
     (use-package time
       :ensure nil
       :config
       (setq display-time-24hr-format t
             display-time-day-and-date t
             display-time-format "%H:%M %d.%m.%Y"
             display-time-load-average-threshold 100) ;; This makes the load always hidden

       (display-time)
       )
   #+END_SRC
** Backup directory and settings
   Save backups in one directory, also dont create lockfiles since they're annoying
   #+BEGIN_SRC emacs-lisp
     (setq delete-by-moving-to-trash 't)
     (setq backup-directory-alist
     `(("." . ,(concat user-emacs-directory "backups"))))

     (setq auto-save-file-name-transforms
     `((".*" ,temporary-file-directory t)))

     (setq create-lockfiles nil)
   #+END_SRC
** Frame
   Frame settings
   #+BEGIN_SRC emacs-lisp
     (use-package frame
       :ensure nil
       :config
       (setq initial-frame-alist (quote ((fullscreen . maximized))))

       (when (member "DejaVu Sans Mono" (font-family-list))
         (message "Font exists on system")
         (set-frame-font "DejaVu Sans Mono-10" t t)
         )
       )
   #+END_SRC
** Parentheses
   Show matching parentheses, automatically insert closing brackets.
   #+BEGIN_SRC emacs-lisp
     (use-package paren
       :ensure nil
       :init (setq show-paren-delay 0)
       :config (show-paren-mode))

     (use-package elec-pair
       :ensure nil
       :hook (prog-mode . electric-pair-mode))
   #+END_SRC
** Indentation
   #+BEGIN_SRC emacs-lisp
     (use-package cc-vars
       :ensure nil
       :config
       (setq-default c-basic-offset alx/indent-width)
       (setq c-default-style '((java-mode . "java")
                               (awk-mode . "awk")
                               (other . "k&r")))
       )

     (use-package js
       :ensure nil
       :config (setq js-indent-level alx/indent-width))

     (use-package python
       :ensure nil
       :config (setq python-indent-offset alx/indent-width))
   #+END_SRC
** Winner-mode/windmove
Windmove-keybinding for switching windows using <shift>+[up|down|right|left].
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :ensure nil
    :config (winner-mode t))

  (use-package windmove
    :ensure nil
    :config (windmove-default-keybindings))
#+END_SRC
** Ediff
   Tell ediff to split windows horizontally.
   #+BEGIN_SRC emacs-lisp
     (use-package ediff
       :ensure nil
       :config
       (setq ediff-split-window-function (quote split-window-horizontally))
       )
   #+END_SRC
** EPG
   Epa-file doesn't seem to work on Mac without this option
   #+BEGIN_SRC emacs-lisp
     (use-package epa
       :config
       (setq epa-pinentry-mode 'loopback)
       )
   #+END_SRC
** Mouse wheel settings
   #+BEGIN_SRC emacs-lisp
     (use-package mwheel
       :ensure nil
       :config
       (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
             mouse-wheel-progressive-speed nil))
   #+END_SRC
** Mac OS settings
   Settings for the custom Mac OS build of Emacs.
   #+BEGIN_SRC emacs-lisp
     (setq ns-use-srgb-colorspace nil)

     (setq mac-option-modifier 'meta)
     (setq mac-command-modifier 'super)
   #+END_SRC


* Packages
** Evil-mode
*** Use evil-mode
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :init
        (setq evil-want-abbrev-expand-on-insert-exit nil
              evil-want-C-i-jump nil
              evil-search-module 'evil-search
              evil-ex-search-vim-style-regexp t)
        (add-to-list 'evil-emacs-state-modes 'magit-mode)
        (add-to-list 'evil-emacs-state-modes 'magit-blame-mode)
        (add-to-list 'evil-emacs-state-modes 'xref--xref-buffer-mode)
        :config
        (define-key evil-motion-state-map (kbd "TAB") nil)

        (evil-mode)
        )

      (use-package evil-surround
        :after evil
        :config (global-evil-surround-mode 1))
    #+END_SRC
*** Keychords
    Return to normal mode with "kj" or "jk" instead of Esc
    Imagine having the Escape key on a touch bar...
    #+BEGIN_SRC emacs-lisp
      (use-package key-chord
        :config
        (setq key-chord-two-keys-delay 0.150)
        (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
        (key-chord-mode 1)
        )
    #+END_SRC
** Visual
   Packages and settings providing visual customization to Emacs
*** Theme
    Use "spacemacs-theme"
    #+BEGIN_SRC emacs-lisp
      (use-package spacemacs-theme
       :demand
       :defer t
       :init (load-theme 'spacemacs-dark t))
    #+END_SRC
*** Minor mode lighters
    Delight is a package which allows to change the way specific minor modes show up in the modeline.
    I use it to hide certain redundant minor mode indicators, and shorten others.
    #+BEGIN_SRC emacs-lisp
      (use-package delight
       :config
       (delight 'flycheck-mode " \u2714" 'flycheck)
       (delight 'company-mode " \u2630" 'company)
       (delight 'helm-mode nil 'helm)
       (delight 'editorconfig-mode nil 'editorconfig)
       (delight 'which-key-mode nil 'which-key)
       (delight 'beacon-mode nil 'beacon)
       (delight 'rainbow-mode nil 'rainbow-mode)
       (delight 'auto-revert-mode nil 'autorevert)
       (delight 'highlight-parentheses-mode nil 'highlight-parentheses)
       (delight 'eldoc-mode nil 'eldoc)
       (delight 'anzu-mode nil 'anzu)
       (delight 'undo-tree-mode nil 'undo-tree)
       (delight 'abbrev-mode nil 'abbrev)
       (delight 'yas-minor-mode nil 'yasnippet)
       )
    #+END_SRC
*** Modeline
    Stopped usign smart-mode-line as it appeared to cause issues, will look into a new package later.
    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :config
        (powerline-center-evil-theme))
    #+END_SRC
*** Highlighting
    Various packages used to highlight things.
    Dimmer allows Emacs to "dim" buffers which are not in focus thus "highlighting" the buffer in which is currently focused.
    Beacon provides visual feedback highlighting the point after the user performs any kind of jump (switching buffers, jumping pages in a file etc.)
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-parentheses
        :config
        (global-highlight-parentheses-mode))

      (use-package dimmer
        :config
        (dimmer-mode))

      (use-package beacon
        :config
        (beacon-mode 1))

      (use-package all-the-icons)
    #+END_SRC
*** Indent guides
    Minor mode for highlighting indentation levels.
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-indent-guides
        :config
        (setq highlight-indent-guides-method 'character))
    #+END_SRC
*** Dired icons
    Small package for displaying neat icons in Dired buffers.
    #+BEGIN_SRC emacs-lisp
      (use-package treemacs-icons-dired
        :after treemacs dired
        :ensure t
        :config
        (treemacs-icons-dired-mode))
    #+END_SRC
*** Other
    I want my Compilation buffers to follow the compiler output
    #+BEGIN_SRC emacs-lisp
      (setq compilation-scroll-output t)
    #+END_SRC
** Startup dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-banner-logo-title "Welcome back!")
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-items '((recents  . 5)
                               (bookmarks . 5)
                               (projects . 5)
                               (agenda . 5)
                               (registers . 5)))
       )
   #+END_SRC
** Utilities
   #+BEGIN_SRC emacs-lisp
     ;; Helm configuration
     (use-package helm
       :ensure t
       :config
       (require 'helm-config)
       (setq helm-mode-fuzzy-match t
             helm-completion-in-region-fuzzy-match t)
       (setq helm-ff-skip-boring-files t
             helm-ff-file-name-history-use-recentf t)
       (setq helm-boring-file-regexp-list
             '("\\.git$" "^.$" "^..$"))
       ;; swap C-z and TAB in helm buffers
       ;; stolen from spacemacs
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "C-z") 'helm-select-action)
       (helm-mode)
       :bind ("M-x" . helm-M-x)
       :bind ("C-x C-f" . helm-find-files)
       :bind ("C-x b" . helm-buffers-list)
       :bind ("C-c G" . helm-google-suggest)
       :bind ("C-c g" . helm-grep-do-git-grep)
       :bind (:map helm-map
                   ("C-j" . helm-next-line)
                   ("C-k" . helm-previous-line)
                   ("C-h" . helm-next-source)
                   ("C-j" . helm-next-line)
                   ([escape] . helm-keyboard-quit)))

     (use-package helm-ag)

     (use-package which-key
       :config
       (setq which-key-idle-delay 0.5)
       (which-key-mode))

     (use-package exec-path-from-shell
       :ensure t
       :config
       (when (memq window-system '(mac ns x))
         (exec-path-from-shell-initialize)))

     (use-package magit
       :config (add-hook 'with-editor-mode-hook #'evil-insert-state))

     (use-package magit-todos
       :after magit
       :config
       (magit-todos-mode 1))

     (use-package undo-tree)
   #+END_SRC
** Navigation
   These packages provide various ways to navigate between buffers, windows and frames.
   Basically, these are used to change what's on my screen at any given time.
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :delight '(:eval (concat " <" (projectile-project-name) ">"))
       :config
       (projectile-mode)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

     (use-package helm-projectile
       :after projectile
       :ensure t
       :config
       (helm-projectile-on))

     (use-package ace-window
       :config
       (global-set-key (kbd "M-o") 'ace-window))

     (use-package elscreen
       :config
       (setq elscreen-prefix-key "\C-Q")
       (elscreen-start))

   #+END_SRC
** Key bindings (general.el)
   General.el for easily remapping keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :demand
       :config
       (general-define-key
        :states '(normal visual insert emacs)
        :prefix "SPC"
        :non-normal-prefix "M-SPC"
        :keymaps 'override
        "SPC" '(helm-M-x :which-key "Extended command")

        ;; File actions
        "f" '(:ignore t :which-key "Files")
        "ff" '(helm-find-files :which-key "Find file")
        "fp" '(helm-projectile-find-file :which-key "File file in project")
        "fs" '(save-buffer :which-key "Save buffer")
        "fS" '(save-some-buffers :which-key "Save all buffers")

        ;; Dired actions
        "d" '(:ignore t :which-key "Dired")
        "dd" '(dired :which-key "Open dired")
        "dj" '(dired-jump :which-key "Dired jump")

        ;; Projectile actions
        "p" '(:ignore t :which-key "Projectile")
        "pp" '(projectile-switch-project :which-key "Switch project")
        "pf" '(helm-projectile-find-file :which-key "Find file in project")
        "pK" '(projectile-kill-buffers :which-key "Kill project buffers")
        "pss" '(projectile-ag :which-key "Search in project (ag)")
        "psg" '(projectile-grep :which-key "Search in project (grep)")

        ;; Search actions
        "s" '(:ignore t :which-key "Search")
        "ss" '(swiper-helm :which-key "Swiper (helm)")

        ;; Git actions
        "g" '(:ignore t :which-key "Git")
        "gs" '(magit-status :which-key "Magit status")
        "gb" '(magit-blame :which-key "Magit blame")

        ;; Buffer actions
        "b" '(:ignore t :which-key "Buffers")
        "bb" '(helm-buffers-list :which-key "Buffer list (helm)")
        "bk" '(kill-buffer :which-key "Kill buffer")
        "bc" '(whitespace-cleanup :which-key "Whitespace cleanup")

        ;; Android-mode actions
        "a" '(:ignore t :which-key "Android (gradle)")
        "ai" '(android-gradle-installDebug :which-key "installDebug")
        "ac" '(android-gradle-clean :which-key "clean")
        "ar" '(android-gradle-assembleRelease :which-key "assembleRelease")
        "ad" '(android-gradle-assembleDebug :which-key "assembleDebug")

        ;; Window actions
        "w" '(:ignore t :which-key "Windows")
        "wo" '(ace-window :which-key "Ace window")
        "wk" '(delete-window :which-key "Close window")
        "wr" '(split-window-right :which-key "Split window right")
        "wd" '(split-window-below :which-key "Split window down")
        "wb" '(balance-windows :which-key "Balance windows")

        ;; Toggles and other adjustments
        "t" '(:ignore t :which-key "Settings")
        "tw" '(global-whitespace-mode :which-key "Toggle whitespace-mode")
        "tf" '(text-scale-adjust :which-key "Adjust text size")
        "tg" '(highlight-indent-guides-mode :which-key "Indent guides")
        "tF" '(focus-mode :which-key "Focus mode")
        "tl" '(global-display-line-numbers-mode :which-key "Line numbers")

        ;; Elscreen
        "q" '(:ignore t :which-key "Elscreen")
        "qn" '(elscreen-next :which-key "Next screen")
        "qp" '(elscreen-previous :which-key "Prev. screen")
        "qc" '(elscreen-create :which-key "New screen")
        "qk" '(elscreen-kill :which-key "Kill screen")

        ;; Xref
        "x" '(:ignore t :which-key "Xref")
        "xd" '(xref-find-definitions :which-key "Find definitions")
        "xD" '(xref-find-definitions-other-window :which-key "Find definitions (other window)")
        "xr" '(xref-find-references :which-key "Find references")

        ;; LSP
        "l" '(:ignore t :which-key "LSP")
        "ls" '(helm-lsp-workspace-symbol :which-key "Find symbol")
        "lS" '(helm-lsp-global-workspace-symbol :which-key "Find symbol (global)")
        "lc" '(lsp-execute-code-action :which-key "Code action")

        ;; Org
        "o" '(:ignore t :which-key "Org")
        "oc" '(org-capture :which-key "Org Capture")
        "oa" '(org-agenda :which-key "Org Agenda")
        "ol" '(org-store-link :which-key "Store link")
        "oL" '(org-insert-link :which-key "Insert link")
        ))
   #+END_SRC
** Editing
   #+BEGIN_SRC emacs-lisp
     (use-package evil-nerd-commenter
       :config
       (evilnc-default-hotkeys))

     (use-package swiper-helm
       :bind ("C-s" . swiper-helm))

     (use-package anzu
       :config
       (global-anzu-mode +1))

     (c-set-offset 'case-label '+)
   #+END_SRC
** LSP
   Language Server Protocol support for various languages.
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :config
       (setq lsp-prefer-flymake nil)
       (setq lsp-keep-workspace-alive nil)
       (add-hook 'kotlin-mode-hook 'lsp)
       (add-hook 'rjsx-mode-hook 'lsp)
       (add-hook 'web-mode-hook 'lsp)
       (add-hook 'python-mode-hook 'lsp)
       (add-hook 'tide-mode-hook 'lsp)
       )

     (use-package helm-lsp
       :ensure t
       )

     (use-package lsp-ui
       :ensure t
       :after lsp-mode
       :config
       (setq lsp-ui-doc-delay 0.5)
       (setq lsp-ui-sideline-enable nil)
       )

     (use-package lsp-java
       :ensure t
       :after lsp-mode
       :config
       (setq lsp-java-save-action-organize-imports nil)
       (add-hook 'java-mode-hook 'lsp)
       )
   #+END_SRC
** Programming
*** Language support
    Various packages providing modes for specific programming (and markup) languages
    #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
        :config
        (add-to-list 'auto-mode-alist '("\\.jsx?$" . rjsx-mode)))

      (use-package tide
        :ensure t
        :after (typescript-mode company flycheck)
        :config
        (add-hook 'typescript-mode-hook (lambda ()
                                         (tide-setup)
                                         (setq flycheck-check-syntax-automatically '(save mode-enabled))
                                         (tide-hl-identifier-mode +1))))

      (use-package web-mode
        :config
        (add-to-list 'auto-mode-alist '("\\.tsx$" . web-mode)))

      (use-package json-mode
        :config
        (defun my-json-indent ()
          "Set tab width to 2 when entering json-mode"
          (setq js-indent-level 2))
        (add-hook 'json-mode-hook 'my-json-indent)
        )

      (use-package omnisharp
        :after company
        :init
        (setenv "PATH" (concat (getenv "PATH") ":/Library/Frameworks/Mono.framework/Versions/Current/Commands"))
        (setq exec-path (append exec-path '("/Library/Frameworks/Mono.framework/Versions/Current/Commands")))
        (add-to-list 'company-backends #'company-omnisharp)
        ;; (setq omnisharp-server-executable-path (expand-file-name (concat user-emacs-directory ".cache/omnisharp/server/v1.32.9/run")))
        :config
        (add-hook 'csharp-mode-hook 'omnisharp-mode)
        )

      (use-package kotlin-mode)

      (use-package android-mode)

      (use-package groovy-mode)

      (use-package swift-mode)

      (use-package php-mode)

      (use-package yaml-mode
        :config
        (add-to-list 'auto-mode-alist '("\\.yml\\'" .  yaml-mode)))

      (use-package dockerfile-mode
        :config
        (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
    #+END_SRC
*** Development utilities
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :config
        (dumb-jump-mode))

      (use-package flycheck
        :ensure t
        :init (global-flycheck-mode))

      (use-package flycheck-popup-tip
        :config
        (add-hook 'flycheck-mode-hook 'flycheck-popup-tip-mode))

      (use-package flycheck-kotlin
        :requires flycheck
        :config
        (flycheck-kotlin-setup))

      (use-package elogcat)

      (use-package yasnippet-snippets)

      (use-package yasnippet
        :after yasnippet-snippets
        :config
        (yas-global-mode 1))

      (use-package multi-term)

      (use-package editorconfig
        :config
        (editorconfig-mode 1))

      (use-package company
        :bind ("<backtab>" . company-complete)
        :config
        (add-hook 'after-init-hook 'global-company-mode))

      (use-package company-lsp
        :after company
        :init
        (push 'company-lsp company-backends))

      (use-package docker
        :ensure t)

      (use-package rainbow-mode
        :config
        (rainbow-mode))
    #+END_SRC
** Elfeed
   #+BEGIN_SRC emacs-lisp
     (use-package elfeed)

     (use-package elfeed-org
       :after elfeed
       :config
       (setq rmh-elfeed-org-files (list "~/.emacs.d/config.org"))
       (elfeed-org))
   #+END_SRC
** Org-mode and other stuff
*** Org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package org
        :hook ((org-mode . visual-line-mode)
               (org-mode . org-indent-mode))
        :config
        (setq org-export-html-postamble nil
              org-log-done 'time
              org-ellipsis "⤵"
              org-src-window-setup 'current-window)

        (add-to-list 'org-structure-template-alist
                     '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

        (setq org-capture-templates
              '(("w" "Work TODO"
                 entry
                 (file+headline "~/Dropbox/Org/work.org" "Todos")
                 "** TODO %? :work:\n")
                ("n" "Note"
                 entry
                 (file+headline "~/Dropbox/Org/index.org" "Notes")
                 "** %?\n")
                ("t" "Todo"
                 entry
                 (file+headline "~/Dropbox/Org/index.org" "Todos")
                 "** TODO %?\n")
                )
              )

        (setq org-directory "~/Dropbox/Org")
        (setq org-agenda-files '("~/Dropbox/Org/index.org" "~/Dropbox/Org/work.org"))
        (add-hook 'org-capture-mode-hook 'evil-insert-state)
        )

      (use-package org-bullets
        :hook (org-mode . org-bullets-mode))
    #+END_SRC
*** Other
      #+BEGIN_SRC emacs-lisp
        (use-package htmlize)

        (use-package ox-twbs)

        (use-package markdown-mode+)

        (use-package latex-preview-pane)
      #+END_SRC
** Keyfreq
   I want to use `keyfreq` to identify which commands I use the most, so I can assign keybinds to common commands.
   #+BEGIN_SRC emacs-lisp
     (use-package keyfreq
       :init
       (keyfreq-mode 1)
       (keyfreq-autosave-mode 1))
   #+END_SRC


* Custom functions
  #+BEGIN_SRC emacs-lisp
    (defun alx/reload-config ()
      "Evaluate init.el file."
      (interactive)
      (load (expand-file-name (concat user-emacs-directory "init.el")))
      )

    (defun indent-buffer ()
      "Indent an entire buffer using the default intenting scheme."
      (interactive)
      (save-excursion
        (delete-trailing-whitespace)
        (indent-region (point-min) (point-max) nil)
        (untabify (point-min) (point-max))))
  #+END_SRC


* Feeds :elfeed:
** Technology :tech:
*** Emacs :emacs:
*** React :react:
**** [[http://reactjs.org/feed.xml][React Dev Blog]]
** Casual :casual:
*** [[https://www.hltv.org/rss/news][HLTV News]]
