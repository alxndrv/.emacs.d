#+TITLE: Emacs configuration
#+AUTHOR: Andrey Aleksandrov
#+OPTIONS: num:nil toc:nil html-postamble:nil

* Basic settings and built-in packages
Settings which are not package-specific
** Emacs
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :preface
    (defvar alx/indent-width 2)
    (defvar alx/gc-threshold 100000000) ; 100mb

    :custom
    (inhibit-startup-screen t)
    (ring-bell-function 'ignore)
    (gc-cons-threshold alx/gc-threshold)
    (gc-cons-percentage 0.1)
    ;; Comment style
    (comment-style 'extra-line)
    ;; Make complation buffers follow output
    (compilation-scroll-output t)
    (warning-suppress-types '((comp)))

    :config
    (setq read-process-output-max (* 1024 1024)) ;; 1mb

    ;; Disable default toolbar and menubar
    (tool-bar-mode -1)
    (menu-bar-mode -1)

    ;; Highlight active line
    (global-hl-line-mode t)

    ;; Use Y/N instead of yes/no
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Always use spaces
    (setq-default indent-tabs-mode nil
                  tab-width alx/indent-width
                  js-indent-level 2)
    )
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight nil
    :diminish
    :custom
    (which-key-idle-delay 0.5)
    :config
    (which-key-setup-minibuffer)
    (which-key-mode))
#+END_SRC
** Custom file
Store all Custom settings in a separate file so it doesn't write into init.el
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :straight nil
    :custom (custom-file "~/.emacs.d/custom.el"))
#+END_SRC
** Scrollbar
Disable scrollbar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :straight nil
    :config (scroll-bar-mode -1))
#+END_SRC
** Column/line numbers
Enable column/line numbers in modeline
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :straight nil
    :diminish visual-line-mode
    :config
    (line-number-mode +1)
    (column-number-mode +1))
#+END_SRC
** Auto-revert
Auto-reverting files edited outside of Emacs
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :straight nil
    :custom
    (auto-revert-interval 3)
    (auto-revert-check-vc-info nil)
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    :config
    (global-auto-revert-mode +1))
#+END_SRC
** Display time in modeline
#+BEGIN_SRC emacs-lisp
  (use-package time
    :straight nil
    :custom
    (display-time-24hr-format t)
    (display-time-day-and-date t)
    (display-time-format "%H:%M")
    (display-time-load-average-threshold 100) ;; This makes the load always hidden
    :config
    (display-time))
#+END_SRC
** Backup directory and settings
Save backups in one directory, also dont create lockfiles since they're annoying
#+BEGIN_SRC emacs-lisp
  (setopt delete-by-moving-to-trash 't)
  (setopt backup-directory-alist
  `(("." . ,(concat user-emacs-directory "backups"))))

  (setopt auto-save-file-name-transforms
  `((".*" ,temporary-file-directory t)))

  (setopt create-lockfiles nil)
#+END_SRC
** Frame
Frame settings
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :straight nil
    :config
    (setq initial-frame-alist '((fullscreen . maximized)))

    (when (member "MesloLGS Nerd Font" (font-family-list))
      (message "Font exists on system")
      (set-frame-font "MesloLGS Nerd Font" t t)
      ))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :straight nil
    :custom
    (delete-by-moving-to-trash t)
    (dired-listing-switches "-alh")
    :config
    (put 'dired-find-alternate-file 'disabled nil))
#+END_SRC
** Parentheses
Show matching parentheses, automatically insert closing brackets.
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :straight nil
    :custom
    (show-paren-delay 0)
    (show-paren-when-point-inside-paren t)
    :config (show-paren-mode))

  (use-package elec-pair
    :straight nil
    :hook (prog-mode . electric-pair-mode))
#+END_SRC
** Indentation
#+BEGIN_SRC emacs-lisp
  (use-package cc-vars
    :straight nil
    :config
    (setq-default c-basic-offset alx/indent-width)
    (setq c-default-style '((java-mode . "java")
                            (awk-mode . "awk")
                            (other . "k&r")))
    )
#+END_SRC
** EditorConfig support
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :straight nil
    :diminish
    :config
    (editorconfig-mode 1))
 #+END_SRC
** Delsel-mode
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :straight nil
    :config
    (delete-selection-mode +1))
#+END_SRC
** Winner-mode/windmove
Windmove-keybinding for switching windows using <shift>+[up|down|right|left].
#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :straight nil
    :config (windmove-default-keybindings))
#+END_SRC
** Ediff
Tell ediff to split windows horizontally.
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :straight nil
    :custom (ediff-split-window-function 'split-window-horizontally))
#+END_SRC
** EPG
Epa-file doesn't seem to work on Mac without this option
#+BEGIN_SRC emacs-lisp
  (use-package epa
    :custom (epa-pinentry-mode 'loopback))
#+END_SRC
** Mouse wheel settings
#+BEGIN_SRC emacs-lisp
  (use-package mwheel
    :straight nil
    :custom
    (mouse-wheel-progressive-speed nil)
    (mouse-wheel-scroll-amount '(1 ((shift) . 1)))
    )
#+END_SRC
** Mac OS settings
Settings for the custom Mac OS build of Emacs.
#+BEGIN_SRC emacs-lisp
  (setopt ns-use-srgb-colorspace nil)

  (setopt mac-option-modifier 'meta)
  (setopt mac-command-modifier 'super)
#+END_SRC
* Packages
** Evil-mode
*** Use evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :custom
    (evil-want-abbrev-expand-on-insert-exit nil)
    (evil-want-C-i-jump nil)
    (evil-want-keybinding nil)
    (evil-search-module 'isearch)
    (evil-ex-search-vim-style-regexp t)
    :hook (after-init . evil-mode)
    :config
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (add-to-list 'evil-emacs-state-modes 'magit-mode)
    (add-to-list 'evil-emacs-state-modes 'magit-blame-mode)
    (add-to-list 'evil-emacs-state-modes 'xref--xref-buffer-mode)
    (add-to-list 'evil-emacs-state-modes 'lsp-ui-imenu-mode))

  (use-package evil-surround
    :after evil
    :hook (evil-mode . global-evil-surround-mode))

  (use-package evil-collection
    :after evil
    :diminish evil-collection-unimpaired-mode
    :config
    (evil-collection-init '(dired)))

  (use-package evil-matchit
    :after evil
    :hook (evil-mode . global-evil-matchit-mode))
#+END_SRC
** Visual
Packages and settings providing visual customization to Emacs
*** Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
   :config
   (load-theme 'doom-nord-light t))
#+END_SRC
*** Modeline
Using doom-modeline, it's pretty and just works.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :config
    (doom-modeline-def-modeline 'alx-custom
      '(eldoc bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info)
      '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process check time))

    (add-hook 'doom-modeline-mode-hook
              (lambda ()
                (doom-modeline-set-modeline 'alx-custom 'default)))
    (doom-modeline-mode))
#+END_SRC
*** Highlighting
Beacon provides visual feedback highlighting the point after the user performs any kind of jump (switching buffers, jumping pages in a file etc.)
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :diminish
    :hook (after-init . beacon-mode))

  (use-package dimmer
    :custom
    (dimmer-fraction 0.4)
    :config
    (dimmer-configure-posframe)
    (dimmer-configure-magit)
    (dimmer-configure-which-key)
    (dimmer-mode))

  (use-package solaire-mode
    :hook (after-init . solaire-global-mode))
#+END_SRC
*** Indent guides
Minor mode for highlighting indentation levels.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :custom (highlight-indent-guides-method 'character))
#+END_SRC
*** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-ivy
    :hook (after-init . all-the-icons-ivy-setup))
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
*** Window sizing
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :hook (after-init . golden-ratio-mode))

  (use-package spacious-padding
    :hook (after-init . spacious-padding-mode))
#+END_SRC
** Startup dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title "Welcome back!")
    (dashboard-startup-banner 'logo)
    (dashboard-items '((recents  . 5)
                       (projects . 5)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :diminish
    :hook (ivy-mode . counsel-mode))

  (use-package counsel-projectile
    :demand ;; load this right away, it needs to be loaded BEFORE `persp-projectile`
    :config (counsel-projectile-mode))

  (use-package ivy
    :diminish
    :hook (after-init . ivy-mode)
    :custom
    (ivy-use-virtual-buffers t)
    (ivy-count-format "(%d/%d) ")
    (ivy-initial-inputs-alist nil)
    :config
    (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
    (define-key ivy-minibuffer-map (kbd "<escape>") #'minibuffer-keyboard-quit)
    (setq ivy-re-builders-alist
          '((counsel-rg . ivy--regex-plus)
            (counsel-projectile-rg . ivy--regex-plus)
            (counsel-ag . ivy--regex-plus)
            (counsel-projectile-ag . ivy--regex-plus)
            (swiper . ivy--regex-plus)
            (t . ivy--regex-plus)))
    )

  (use-package ivy-rich
    :preface
    (defun ivy-rich-switch-buffer-icon (candidate)
      (with-current-buffer
          (get-buffer candidate)
        (all-the-icons-icon-for-mode major-mode)))
    :init
    (setq ivy-rich-display-transformers-list ; max column width sum = (ivy-poframe-width - 1)
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-switch-buffer-icon (:width 2))
              (ivy-rich-candidate (:width 80))
              (ivy-rich-switch-buffer-project (:width 40 :face success))
              (ivy-rich-switch-buffer-major-mode (:width 40 :face warning)))
             :predicate
             (lambda (cand) (get-buffer cand)))
            counsel-M-x
            (:columns
             ((counsel-M-x-transformer (:width 55))
              (ivy-rich-counsel-function-docstring (:width 154 :face font-lock-doc-face))))))
    :config
    (ivy-rich-mode +1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

  (use-package ivy-xref
    :custom (xref-show-definitions-function #'ivy-xref-show-defs))

  (use-package swiper
    :after ivy
    :custom
    (swiper-action-recenter t)
    (swiper-goto-start-of-match t))

  (use-package ivy-posframe
    :after ivy
    :diminish
    :custom
    (ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    (ivy-posframe-parameters '((internal-border-width . 10)
                               (left-fringe . 8)
                               (right-fringe . 8)))
    (ivy-posframe-height-alist '((t . 40)))
    (ivy-posframe-width 200)
    (ivy-posframe-min-height 40)
    (ivy-posframe-height 40)
    :hook (ivy-mode . ivy-posframe-mode))
#+END_SRC
** Prescient
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :custom
    (prescient-filter-method '(literal regexp initialism fuzzy))
    :hook (after-init . prescient-persist-mode))

  (use-package ivy-prescient
    :after (prescient ivy)
    :hook (ivy-mode . ivy-prescient-mode)
    :custom
    (ivy-prescient-retain-classic-highlighting t))

  (use-package company-prescient
    :after (prescient company)
    :hook (company-mode . company-prescient-mode))
#+END_SRC
** Utilities
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  (use-package wgrep
    :diminish)
#+END_SRC
** Git/VC
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (add-hook 'with-editor-mode-hook #'evil-insert-state)
    (transient-append-suffix 'magit-commit "-A"
      '("-N" "Don't sign with GPG" "--no-gpg-sign")))

  (use-package browse-at-remote)
#+END_SRC
** Navigation
These packages provide various ways to navigate between buffers, windows and frames.
Basically, these are used to change what's on my screen at any given time.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish
    :bind-keymap ("C-c p" . projectile-command-map)
    :custom
    (projectile-sort-order 'recentf)
    (projectile-indexing-method 'hybrid)
    (projectile-completion-system 'ivy)
    :hook (after-init . projectile-mode))

  (use-package treemacs)

  (use-package perspective
    :demand t
    :custom
    (persp-suppress-no-prefix-key-warning t)
    (persp-modestring-short t)
    :config
    (unless (equal persp-mode t)
      (persp-mode)))

  (use-package persp-projectile :after (counsel-projectile))
#+END_SRC
** Key bindings (general.el)
General.el for easily remapping keybindings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand
    :config
    (general-define-key
     :states '(normal visual motion insert emacs)
     :prefix "SPC"
     :non-normal-prefix "M-SPC"
     :keymaps 'override
     "SPC" '(counsel-M-x :which-key "Extended command")
     "R" '(ivy-resume :which-key "Resume ivy session")
     "e" '(ellama :which-key "Ellama")

     ;; File actions
     "f" '(:ignore t :which-key "Files")
     "ff" '(counsel-find-file :which-key "Find file")
     "fp" '(projectile-find-file :which-key "File file in project")
     "fs" '(save-buffer :which-key "Save buffer")
     "fS" '(save-some-buffers :which-key "Save all buffers")

     ;; Dired actions
     "d" '(:ignore t :which-key "Dired")
     "dd" '(dired :which-key "Open dired")
     "dj" '(dired-jump :which-key "Dired jump")

     ;; Projectile actions
     "p" '(:ignore t :which-key "Projectile")
     "pp" '(projectile-switch-project :which-key "Switch project")
     "pf" '(projectile-find-file :which-key "Find file in project")
     "pd" '(projectile-find-dir :which-key "Open directory in project")
     "pK" '(projectile-kill-buffers :which-key "Kill project buffers")
     "pss" '(projectile-ag :which-key "Search in project (ag)")
     "psr" '(projectile-ripgrep :which-key "Search in project (ripgrep)")
     "psg" '(projectile-grep :which-key "Search in project (grep)")

     ;; Search actions
     "s" '(:ignore t :which-key "Search")
     "ss" '(swiper :which-key "Swiper (ivy)")

     ;; Git actions
     "g" '(:ignore t :which-key "Git")
     "gl" '(browse-at-remote :which-key "Browse at remote")
     "gs" '(magit-status :which-key "Magit status")
     "gb" '(magit-blame :which-key "Magit blame")
     "gmn" '(smerge-next :which-key "SMerge: Next")
     "gmp" '(smerge-prev :which-key "SMerge: Prev")
     "gmU" '(smerge-keep-upper :which-key "SMerge: Keep upper")
     "gmL" '(smerge-keep-lower :which-key "SMerge: Keep lower")
     "gmA" '(smerge-keep-all :which-key "SMerge: Keep all")

     ;; Buffer actions
     "b" '(:ignore t :which-key "Buffers")
     "bb" '(persp-ivy-switch-buffer :which-key "Buffer list (perspective)")
     "bB" '(ivy-switch-buffer :which-key "Buffer list (all)")
     "bk" '(kill-buffer :which-key "Kill buffer")
     "bc" '(whitespace-cleanup :which-key "Whitespace cleanup")
     "bs" '(scratch-buffer :which-key "Open scratch buffer")

     ;; Window actions
     "w" '(:ignore t :which-key "Windows")
     "wk" '(delete-window :which-key "Close window")
     "wr" '(split-window-right :which-key "Split window right")
     "wd" '(split-window-below :which-key "Split window down")
     "wb" '(balance-windows :which-key "Balance windows")

     ;; Toggles and other adjustments
     "t" '(:ignore t :which-key "Settings")
     "tw" '(global-whitespace-mode :which-key "Toggle whitespace-mode")
     "tf" '(global-text-scale-adjust :which-key "Adjust text size")
     "tg" '(highlight-indent-guides-mode :which-key "Indent guides")
     "tl" '(global-display-line-numbers-mode :which-key "Toggle line numbers")
     "tL" '(alx/toggle-line-number-type :which-key "Toggle line numbering style")
     "td" '(dimmer-mode :which-key "Dimmer-mode")

     "q" '(:ignore t :which-key "Perspective")
     "qn" '(persp-next :which-key "Next perspective")
     "qp" '(persp-prev :which-key "Prev. perspective")
     "qs" '(persp-switch :which-key "Switch perspective")
     "qk" '(persp-kill :which-key "Kill perspective")

     ;; Xref
     "x" '(:ignore t :which-key "Xref")
     "xd" '(xref-find-definitions :which-key "Find definitions")
     "xD" '(xref-find-definitions-other-window :which-key "Find definitions (other window)")
     "xr" '(xref-find-references :which-key "Find references")
     "xR" '(lsp-treemacs-references :which-key "Show reference tree")
     "xI" '(lsp-treemacs-implementations :which-key "Show implementation tree")

     ;; LSP
     "l" '(:ignore t :which-key "LSP")
     "ls" '(lsp-ivy-workspace-symbol :which-key "Find symbol")
     "lS" '(lsp-ivy-global-workspace-symbol :which-key "Find symbol (global)")
     "lc" '(lsp-execute-code-action :which-key "Code action")
     "li" '(lsp-ui-imenu :which-key "Open imenu side window")
     "ld" '(lsp-ui-doc-glance :which-key "Glance at docs")
     ))
#+END_SRC
** Editing
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :hook (after-init . evilnc-default-hotkeys))

  (use-package anzu
    :diminish
    :hook (after-init . global-anzu-mode))
#+END_SRC
** LSP
Language Server Protocol support for various languages.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((java-mode
            python-ts-mode
            js-mode
            typescript-ts-mode
            web-mode
            rust-ts-mode
            go-ts-mode
            csharp-ts-mode
            terraform-mode
            ) . lsp)
    :commands lsp
    :custom
    (lsp-enable-links t)
    (lsp-prefer-flymake nil)
    (lsp-keep-workspace-alive nil)
    (lsp-terraform-ls-prefill-required-fields t))

  (use-package lsp-ivy)

  (use-package lsp-treemacs
    :after treemacs)

  (use-package lsp-ui
    :after lsp-mode
    :custom
    (lsp-ui-doc-delay 0.5)
    (lsp-ui-sideline-enable nil))
#+END_SRC
** Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind ("<backtab>" . company-complete)
    :diminish
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :hook (prog-mode . company-mode))
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish
    :hook (prog-mode . flycheck-mode))

  (use-package flycheck-posframe
    :diminish
    :hook (flycheck-mode . flycheck-posframe-mode)
    :custom
    (flycheck-posframe-position 'point-bottom-left-corner-upward))
#+END_SRC
** Programming
*** Language support
Various packages providing modes for specific programming (and markup) languages
#+BEGIN_SRC emacs-lisp
  (use-package python
    :straight nil
    :custom (python-indent-offset alx/indent-width))

  (use-package python-black
    :after python
    :hook (python-ts-mode . python-black-on-save-mode))

  (use-package web-mode
    :after flycheck
    :config
    (flycheck-add-mode 'javascript-eslint 'web-mode))

  (use-package js
    :straight nil
    :custom (js-indent-level alx/indent-width))

  (use-package css-mode
    :straight nil
    :custom (css-indent-offset alx/indent-width))

  (use-package typescript-ts-mode
    :straight nil)

  (use-package json-ts-mode
    :straight nil)

  (use-package go-ts-mode
    :straight nil)

  (use-package yaml-mode
    :mode ("\\.yml\\'" .  yaml-mode))

  (use-package dockerfile-ts-mode
    :straight nil
    :mode ("Dockerfile\\'" . dockerfile-ts-mode))

  (use-package terraform-mode
    :hook (terraform-mode . terraform-format-on-save-mode))
#+END_SRC
*** Tree-sitter
Emacs 29 introduced native treesitter support
#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)
    :config
    (delete 'yaml treesit-auto-langs) ;; Yaml-ts-mode is bad.
    (global-treesit-auto-mode))
#+end_src
** Prettier integration
#+BEGIN_SRC emacs-lisp
  (use-package add-node-modules-path
    :hook ((web-mode typescript-ts-mode js-ts-mode) . add-node-modules-path))

  (use-package prettier-js
    :diminish
    :hook ((web-mode typescript-ts-mode js-ts-mode) . prettier-js-mode))
#+END_SRC
** Org-mode and other stuff
*** Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :diminish org-indent-mode
    :hook ((org-mode . visual-line-mode)
           (org-mode . org-indent-mode))
    :custom
    (org-log-done 'time)
    (org-ellipsis "⤵")
    (org-src-window-setup 'current-window)
    :config
    (add-to-list 'org-modules 'org-tempo))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC
** Keyfreq
I want to use `keyfreq` to identify which commands I use the most, so I can assign keybinds to common commands.
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
** Diminish mode
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC
** AI
#+BEGIN_SRC emacs-lisp
  (use-package ellama
    ;; send last message in chat buffer with C-c C-c
    :hook (org-ctrl-c-ctrl-c-final . ellama-chat-send-last-message)
    :custom
    (ellama-auto-scroll t)
    ;; Dont show ellama context in header line in all buffers
    (ellama-context-header-line-global-mode nil)
    ;; Dont show ellama session id in header line in all buffers
    (ellama-session-header-line-global-mode nil))
#+END_SRC

* Custom functions
#+BEGIN_SRC emacs-lisp
  (defun alx/reload-config ()
    "Evaluate init.el file."
    (interactive)
    (load user-init-file)
    )

  (defun alx/toggle-line-number-type ()
    (interactive)
    (if (eq display-line-numbers-type 'relative)
        (setopt display-line-numbers-type 't)
      (setopt display-line-numbers-type 'relative)
      )
    (message (format "Line number type is now: %s" display-line-numbers-type))
    ;; "Reload" global line number mode if its already enabled when the setting is changed
    (if global-display-line-numbers-mode
        (global-display-line-numbers-mode +1))
    )
#+END_SRC
