#+TITLE: Emacs configuration
#+AUTHOR: Andrey Aleksandrov
#+OPTIONS: num:nil toc:nil html-postamble:nil


* Custom file
  Store all Custom settings in a separate file so it doesn't write into init.el
  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
  #+END_SRC
* Basic settings
  Turn off useless GUI buttons, highlight current line, show line and column numbers.
  I also don't need the default startup screen
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen t)

    (global-hl-line-mode t)
    (global-linum-mode 1)

    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (setq ring-bell-function 'ignore)

    (line-number-mode)
    (column-number-mode)
  #+END_SRC

  Display time in the modeline
  #+BEGIN_SRC emacs-lisp
    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
    (display-time)
  #+END_SRC

  Save backups in one directory, also dont create lockfiles since they're annoying
  #+BEGIN_SRC emacs-lisp
    (setq delete-by-moving-to-trash 't)
    (setq backup-directory-alist
    `(("." . ,(concat user-emacs-directory "backups"))))

    (setq auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))

    (setq create-lockfiles nil)
  #+END_SRC

  Increase Emacs' threshhold for garbage collection. In theory this makes Emacs faster.
  #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold 50000000)
  #+END_SRC

  Set the font, if it is available
  #+BEGIN_SRC emacs-lisp
    (when (member "DejaVu Sans Mono" (font-family-list))
      (set-default-font "DejaVu Sans Mono"))
  #+END_SRC

  Set the default tab width to 4. And use spaces
  #+BEGIN_SRC emacs-lisp
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil)
  #+END_SRC
  
  Show matching parentheses, automatically insert closing brackets.
  #+BEGIN_SRC emacs-lisp
    (setq show-paren-delay 0)
    (show-paren-mode)
    (electric-pair-mode)
  #+END_SRC

  Enable ido-mode, also winner mode for window configurations.
  Windmove-keybinding for switching windows using <shift>+[up|down|right|left].
  #+BEGIN_SRC emacs-lisp
    (winner-mode t)
    (windmove-default-keybindings)
    (ido-mode t)
  #+END_SRC

  Some settings to make scrolling work properly on Mac OS.
  Set default major mode and tell ediff to split windows horizontally.
  #+BEGIN_SRC emacs-lisp
    (setq mouse-wheel-scroll-amount '(1))
    (setq mouse-wheel-progressive-speed nil)
 
    (setq major-mode 'text-mode)
    (setq ediff-split-window-function (quote split-window-horizontally))
  #+END_SRC
* System specific settings
  #+BEGIN_SRC emacs-lisp
	(unless (string-equal system-type "darwin")
	  (set-face-attribute 'default nil :height 115 :family "Consolas")
	  )

	(setq ns-use-srgb-colorspace nil)

	(setq mac-option-modifier 'meta)
	(setq mac-command-modifier 'super)
  #+END_SRC
* Bootstrap use-package
  #+BEGIN_SRC emacs-lisp
	;; Bootstrap use-package
	(setq package-enable-at-startup nil)
	(require 'package)
	(add-to-list 'package-archives  '("melpa" . "http://melpa.org/packages/"))
	(package-initialize)
	(unless (package-installed-p 'use-package)
	  (package-refresh-contents)
	  (package-install 'use-package))
	(require 'use-package)
	(setq use-package-always-ensure t
		  use-package-verbose t)
  #+END_SRC
* Packages
** Evil-mode
   Use evil-mode
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround)

     (use-package evil
       :after evil-surround
       :config
       (setq evil-want-abbrev-expand-on-insert-exit nil)

       (add-to-list 'evil-emacs-state-modes 'magit-mode)
       (add-to-list 'evil-emacs-state-modes 'magit-mode)
       (add-to-list 'evil-emacs-state-modes 'magit-mode)

       (global-evil-surround-mode 1)
       (evil-mode)
       )
   #+END_SRC

   Return to normal mode with "kj" or "jk" instead of Esc
   Imagine having the Escape key on a touch bar...
   #+BEGIN_SRC emacs-lisp
     (use-package key-chord
       :config
       (setq key-chord-two-keys-delay 0.1)
       (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
       (key-chord-mode 1)
       )
   #+END_SRC
** Visual
   Packages and settings providing visual customization to Emacs
   
   Currently I use the "solarized-dark" theme.
   #+BEGIN_SRC emacs-lisp
      (use-package solarized-theme
       :demand
       :config
       (setq x-underline-at-descent-line t)
       (load-theme 'solarized-dark t)
       )
   #+END_SRC
   
   Delight is a package which allows to change the way specific minor modes show up in the modeline.
   I use it to hide certain redundant minor mode indicators, and shorten others.
   #+BEGIN_SRC emacs-lisp
     (use-package delight
      :config
      (delight 'flycheck-mode " \u2714" 'flycheck)
      (delight 'company-mode " \u2630" 'company)
      (delight 'helm-mode " \u2388" 'helm)
      (delight 'editorconfig-mode nil 'editorconfig)
      (delight 'which-key-mode nil 'which-key)
      (delight 'beacon-mode nil 'beacon)
      (delight 'rainbow-mode nil 'rainbow-mode)
      (delight 'auto-revert-mode nil 'autorevert)
      (delight 'highlight-parentheses-mode nil 'highlight-parentheses)
      (delight 'eldoc-mode nil 'eldoc)
      (delight 'anzu-mode nil 'anzu)
      (delight 'undo-tree-mode nil 'undo-tree))
   #+END_SRC
   
   "smart-mode-line" makes the modeline, well... smarter
   #+BEGIN_SRC emacs-lisp
     (use-package smart-mode-line
       :init
       (setq sml/shorten-directory 't
             sml/shorten-modes 't)
       :config
       (sml/setup)
       (sml/apply-theme 'respectful)
       )
   #+END_SRC

   Various packages used to highlight things.
   Dimmer allows Emacs to "dim" buffers which are not in focus thus "highlighting" the buffer in which is currently focused.
   Beacon provides visual feedback highlighting the point after the user performs any kind of jump (switching buffers, jumping pages in a file etc.)
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-symbol)

     (use-package highlight-parentheses
       :config
       (global-highlight-parentheses-mode))

     (use-package dimmer
       :config
       (dimmer-mode))

     (use-package beacon
       :config
       (beacon-mode 1))

     (use-package focus)

     (use-package all-the-icons)
   #+END_SRC

   I want my Compilation buffers to follow the compiler output
   #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output t)
   #+END_SRC
** Utilities
   #+BEGIN_SRC emacs-lisp
	 ;; Helm configuration
	 (use-package helm
	   :config
	   (require 'helm-config)
	   (setq helm-mode-fuzzy-match t
			 helm-completion-in-region-fuzzy-match t)
	   (setq helm-ff-skip-boring-files t
			 helm-ff-file-name-history-use-recentf t)
	   (setq helm-boring-file-regexp-list
			 '("\\.git$" "^.$" "^..$"))
	   ;; swap C-z and TAB in helm buffers
	   ;; stolen from spacemacs
	   (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
	   (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
	   (define-key helm-map (kbd "C-z") 'helm-select-action)
	   (helm-mode)
	   :bind ("M-x" . helm-M-x)
	   :bind ("C-x C-f" . helm-find-files)
	   :bind ("C-x b" . helm-buffers-list)
	   :bind ("C-c G" . helm-google-suggest)
	   :bind ("C-c g" . helm-grep-do-git-grep)
	   :bind (:map helm-map
				   ("C-j" . helm-next-line)
				   ("C-k" . helm-previous-line)
				   ("C-h" . helm-next-source)
				   ("C-j" . helm-next-line)
				   ([escape] . helm-keyboard-quit)))

	 (use-package helm-ag)

	 (use-package which-key
	   :config
	   (setq which-key-idle-delay 0.5)
	   (which-key-mode))

	 (use-package exec-path-from-shell
	   :config
	   (when (memq window-system '(mac ns x))
		 (exec-path-from-shell-initialize)))

	 (use-package magit
	   :config
	   (global-set-key (kbd "C-x g") 'magit-status))

	 (use-package git-messenger)

	 (use-package undo-tree)
   #+END_SRC
** Navigation
   These packages provide various ways to navigate between buffers, windows and frames.
   Basically, these are used to change what's on my screen at any given time.
   #+BEGIN_SRC emacs-lisp
	 (use-package projectile
	   :config
	   (projectile-mode)
	   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

	 (use-package helm-projectile
	   :config
	   (helm-projectile-on))

	 (use-package neotree
	   :config
	   (setq neo-theme 'arrows)
	   (global-set-key [f8] 'neotree-toggle))

	 (use-package ace-window
	   :config
	   (global-set-key (kbd "M-o") 'ace-window))

	 (use-package elscreen
	   :config
       (setq elscreen-prefix-key "\C-Q")
	   (elscreen-start))

   #+END_SRC
** Key bindings (general.el)
   General.el for easily remapping keybindings
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :demand
       :config
       (general-define-key
        :states '(normal visual insert emacs)
        :prefix "SPC"
        :non-normal-prefix "M-SPC"
        :keymaps 'override
        "SPC" '(helm-M-x :which-key "Extended command")

        ;; File actions
        "f" '(:ignore t :which-key "Files")
        "ff" '(helm-find-files :which-key "Find file")
        "fp" '(helm-projectile-find-file :which-key "File file in project")
        "fs" '(save-buffer :which-key "Save buffer")
        "fS" '(save-some-buffers :which-key "Save all buffers")

        ;; Projectile actions
        "p" '(:ignore t :which-key "Projectile")
        "pp" '(projectile-switch-project :which-key "Switch project")
        "pf" '(helm-projectile-find-file :which-key "Find file in project")
        "pss" '(projectile-ag :which-key "Search in project (ag)")
        "psg" '(projectile-grep :which-key "Search in project (grep)")

        ;; Search actions
        "s" '(:ignore t :which-key "Search")
        "ss" '(swiper-helm :which-key "Swiper (helm)")

        ;; Git actions
        "g" '(:ignore t :which-key "Git")
        "gs" '(magit-status :which-key "Magit status")
        "gb" '(magit-blame :which-key "Magit blame")

        ;; Buffer actions
        "b" '(:ignore t :which-key "Buffers")
        "bb" '(helm-buffers-list :which-key "Buffer list (helm)")
        "bk" '(kill-buffer :which-key "Kill buffer")

        ;; Android-mode actions
        "a" '(:ignore t :which-key "Android (gradle)")
        "ai" '(android-gradle-installDebug :which-key "installDebug")
        "ac" '(android-gradle-clean :which-key "clean")
        "ar" '(android-gradle-assembleRelease :which-key "assembleRelease")
        "ad" '(android-gradle-assembleDebug :which-key "assembleDebug")

        ;; Window actions
        "w" '(:ignore t :which-key "Windows")
        "wo" '(ace-window :which-key "Ace window")
        "wk" '(delete-window :which-key "Close window")
        "wr" '(split-window-right :which-key "Split window right")
        "wd" '(split-window-below :which-key "Split window down")

        ;; Toggles and other adjustments
        "t" '(:ignore t :which-key "Settings")
        "tw" '(global-whitespace-mode :which-key "Toggle whitespace-mode")
        "tf" '(text-scale-adjust :which-key "Adjust text size")

        ;; Elscreen
        "q" '(:ignore t :which-key "Elscreen")
        "qn" '(elscreen-next :which-key "Next screen")
        "qp" '(elscreen-previous :which-key "Prev. screen")
        "qc" '(elscreen-create :which-key "New screen")
        "qk" '(elscreen-kill :which-key "Kill screen")
        ))
   #+END_SRC
** Editing
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :config
       (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this))

     (use-package evil-nerd-commenter
       :config
       (evilnc-default-hotkeys))

     (use-package avy
       :config
       (global-set-key (kbd "C-:") 'avy-goto-char))

     (use-package swiper-helm
       :bind ("C-s" . swiper-helm))

     (use-package anzu
       :config
       (global-anzu-mode +1))

     (c-set-offset 'case-label '+)
   #+END_SRC
** LSP 
   Language Server Protocol support for various languages.
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :config
       (lsp-define-stdio-client
        lsp-kotlin-mode
        "kotlin"
        (lambda () (projectile-project-root))
        ;; Requires: https://github.com/fwcd/KotlinLanguageServer
        '("~/Tools/KotlinLanguageServer/build/install/kotlin-language-server/bin/kotlin-language-server"))
       )

     (use-package lsp-ui
       :after lsp-mode)

     (use-package lsp-javascript-typescript
       :after (lsp-mode lsp-ui)
       :config
       ;; Requires: `npm i -g javascript-typescript-langserver`
       (add-hook 'rjsx-mode-hook #'lsp-javascript-typescript-enable)
       )

     (use-package lsp-java
       :ensure t
       :after (lsp-mode lsp-ui)
       :requires (lsp-ui-flycheck lsp-ui-sideline)
       :config
       (add-hook 'java-mode-hook 'lsp-java-enable))

     (add-hook 'kotlin-mode-hook #'lsp-kotlin-mode-enable)
     (add-hook 'lsp-mode-hook 'lsp-ui-mode)
   #+END_SRC
** Programming
*** Language support
    Various packages providing modes for specific programming (and markup) languages 
	#+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
        :config
        (add-to-list 'auto-mode-alist '("\\.jsx?$" . rjsx-mode)))

      (use-package json-mode)

      (use-package csharp-mode)

      (use-package kotlin-mode)

      (use-package android-mode)

      (use-package groovy-mode)

      (use-package swift-mode)

      (use-package php-mode)

      (use-package yaml-mode
        :config
        (add-to-list 'auto-mode-alist '("\\.yml\\'" .  yaml-mode)))

      (use-package dockerfile-mode
        :config
        (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))

      (use-package meghanada
        :config
        ;; (add-hook 'java-mode-hook
        ;;           (lambda ()
        ;;             (meghanada-mode t)
        ;;             (flycheck-mode +1)
        ;;             ))
        (cond
         ((eq system-type 'windows-nt)
          (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME"))))
         )
        )
	#+END_SRC
*** Development utilities
	#+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :config
        (dumb-jump-mode))

      (use-package flycheck
        :ensure t
        :init (global-flycheck-mode))

      (use-package flycheck-popup-tip
        :config
        (add-hook 'flycheck-mode-hook 'flycheck-popup-tip-mode))

      (use-package flycheck-kotlin
        :requires flycheck
        :config
        (flycheck-kotlin-setup))

      (use-package elogcat)

      (use-package yasnippet-snippets)

      (use-package yasnippet
        :after yasnippet-snippets
        :config
        (yas-global-mode 1))

      (use-package restclient)

      (use-package multi-term)

      (use-package expand-region)

      (use-package editorconfig
        :config
        (editorconfig-mode 1))

      (use-package company
        :config
        (add-hook 'after-init-hook 'global-company-mode))

      (use-package company-lsp
        :after company
        :config
        (push 'company-lsp company-backends))

      ;; (use-package auto-complete
      ;;   :ensure t
      ;;   :config
      ;;   (ac-config-default)
      ;;   (setq ac-auto-show-menu 0.4)
      ;;   (add-to-list 'ac-modes 'rjsx-mode)
      ;;   (add-to-list 'ac-modes 'kotlin-mode)
      ;;   (global-auto-complete-mode t))

      (use-package rainbow-mode
        :config
        (rainbow-mode))
	#+END_SRC
** Documenting
   #+BEGIN_SRC emacs-lisp
     (use-package htmlize)

     (use-package org
       :config
       (setq org-export-html-postamble nil)
       (add-to-list 'org-structure-template-alist
                    '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
       (setq org-log-done 'time)
       (setq org-ellipsis "⤵")
       (setq org-src-window-setup 'current-window)
       )

     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

     (use-package ox-twbs)

     (use-package markdown-mode+)
     (use-package flymd)

     (use-package latex-preview-pane)
   #+END_SRC
** Misc.
   #+BEGIN_SRC emacs-lisp
     (use-package md4rd)

     (use-package calfw)

     (use-package sx
       :config
       (bind-keys :prefix "C-c s"
                  :prefix-map my-sx-map
                  :prefix-docstring "Global keymap for SX."
                  ("q" . sx-tab-all-questions)
                  ("i" . sx-inbox)
                  ("o" . sx-open-link)
                  ("u" . sx-tab-unanswered-my-tags)
                  ("a" . sx-ask)
                  ("s" . sx-search)))


     (defun indent-buffer ()
       "Indent an entire buffer using the default intenting scheme."
       (interactive)
       (save-excursion
         (delete-trailing-whitespace)
         (indent-region (point-min) (point-max) nil)
         (untabify (point-min) (point-max))))

                                             ; Flymd compatibility fix, ie. we force it to use Firefox
     (defun flymd-browser-function-custom (url)
       (let ((process-environment (browse-url-process-environment)))
         (apply 'start-process
                (concat "firefox " url)
                nil
                "/usr/bin/open"
                (list "-a" "firefox" url))))

     (setq flymd-browser-open-function 'flymd-browser-function-custom)

     (use-package dashboard
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-banner-logo-title "Welcome back!")
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-items '((recents  . 5)
                               (bookmarks . 5)
                               (projects . 5)
                               (agenda . 5)
                               (registers . 5)))
       )
   #+END_SRC
